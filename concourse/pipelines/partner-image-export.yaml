# Export partner images and publish relevant images for OS Login staging tests.
---
resource_types:
- name: gcs
  type: registry-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: compute-image-tools
  type: git
  source:
    uri: https://github.com/GoogleCloudPlatform/compute-image-tools.git
    branch: master
- name: guest-test-infra
  type: git
  source:
    uri: https://github.com/GoogleCloudPlatform/guest-test-infra.git
    branch: master
- name: cos-85-lts-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/cos/cos-85-lts-v([0-9]+).tar.gz"
- name: cos-89-lts-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/cos/cos-89-lts-v([0-9]+).tar.gz"
- name: cos-93-lts-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/cos/cos-93-lts-v([0-9]+).tar.gz"
- name: cos-97-lts-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/cos/cos-97-lts-v([0-9]+).tar.gz"
- name: cos-dev-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/cos/cos-dev-v([0-9]+).tar.gz"
- name: fedora-33-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/fedora/fedora-33-v([0-9]+).tar.gz"
- name: fedora-34-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/fedora/fedora-34-v([0-9]+).tar.gz"
- name: fedora-coreos-next-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/fedora/fedora-coreos-next-v([0-9]+).tar.gz"
- name: fedora-coreos-stable-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/fedora/fedora-coreos-stable-v([0-9]+).tar.gz"
- name: fedora-coreos-testing-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/fedora/fedora-coreos-testing-v([0-9]+).tar.gz"
- name: freebsd-11-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/freebsd/freebsd-11-v([0-9]+).tar.gz"
- name: freebsd-12-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/freebsd/freebsd-12-v([0-9]+).tar.gz"
- name: freebsd-13-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/freebsd/freebsd-13-v([0-9]+).tar.gz"
- name: opensuse-leap-15-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/suse/opensuse-leap-15-v([0-9]+).tar.gz"
- name: sles-12-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/suse/sles-12-v([0-9]+).tar.gz"
- name: sles-15-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/suse/sles-15-v([0-9]+).tar.gz"
- name: ubuntu-1804-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/ubuntu/ubuntu-1804-v([0-9]+).tar.gz"
- name: ubuntu-2004-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/ubuntu/ubuntu-2004-v([0-9]+).tar.gz"
- name: ubuntu-pro-1604-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/ubuntu/ubuntu-pro-1604-v([0-9]+).tar.gz"
- name: ubuntu-pro-1804-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/ubuntu/ubuntu-pro-1804-v([0-9]+).tar.gz"
- name: ubuntu-pro-2004-gcs
  type: gcs
  source:
    bucket: gce-image-archive
    regexp: "partner/ubuntu/ubuntu-pro-2004-v([0-9]+).tar.gz"

jobs:
# Export jobs
# Cos 85
- name: export-cos-85-lts
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "cos-85-lts"
  - put: cos-85-lts-gcs
    params:
      file: build-id-dir/cos-85-lts*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: cos-85-lts-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-cos-85-lts
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/cos_85_lts_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-cos-85-lts"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-cos-85-lts"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Cos 89
- name: export-cos-89-lts
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "cos-89-lts"
  - put: cos-89-lts-gcs
    params:
      file: build-id-dir/cos-89-lts*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: cos-89-lts-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-cos-89-lts
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/cos_89_lts_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-cos-89-lts"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-cos-89-lts"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Cos 93
- name: export-cos-93-lts
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "cos-93-lts"
  - put: cos-93-lts-gcs
    params:
      file: build-id-dir/cos-93-lts*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: cos-93-lts-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-cos-93-lts
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/cos_93_lts_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-cos-93-lts"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-cos-93-lts"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Cos 97
- name: export-cos-97-lts
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "cos-97-lts"
  - put: cos-97-lts-gcs
    params:
      file: build-id-dir/cos-97-lts*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: cos-97-lts-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-cos-97-lts
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/cos_97_lts_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-cos-97-lts"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-cos-97-lts"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Cos dev
- name: export-cos-dev
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "cos-dev"
  - put: cos-dev-gcs
    params:
      file: build-id-dir/cos-dev*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: cos-dev-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-cos-dev
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/cos_dev_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-cos-dev"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-cos-dev"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Fedora 33
- name: export-fedora-33
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "fedora-33"
  - put: fedora-33-gcs
    params:
      file: build-id-dir/fedora-33*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: fedora-33-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-fedora-33
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/fedora_33_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-fedora-33"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-fedora-33"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Fedora 34
- name: export-fedora-34
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "fedora-34"
  - put: fedora-34-gcs
    params:
      file: build-id-dir/fedora-34*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: fedora-34-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-fedora-34
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/fedora_34_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-fedora-34"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-fedora-34"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Fedora CoreOS Next
- name: export-fedora-coreos-next
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "fedora-coreos-next"
  - put: fedora-coreos-next-gcs
    params:
      file: build-id-dir/fedora-coreos-next*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: fedora-coreos-next-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-fedora-coreos-next
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/fedora_coreos_next_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-fedora-coreos-next"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-fedora-coreos-next"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Fedora CoreOS Stable
- name: export-fedora-coreos-stable
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "fedora-coreos-stable"
  - put: fedora-coreos-stable-gcs
    params:
      file: build-id-dir/fedora-coreos-stable*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: fedora-coreos-stable-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-fedora-coreos-stable
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/fedora_coreos_stable_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-fedora-coreos-stable"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-fedora-coreos-stable"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Fedora CoreOS Testing
- name: export-fedora-coreos-testing
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "fedora-coreos-testing"
  - put: fedora-coreos-testing-gcs
    params:
      file: build-id-dir/fedora-coreos-testing*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: fedora-coreos-testing-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-fedora-coreos-testing
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/fedora_coreos_testing_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-fedora-coreos-testing"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-fedora-coreos-testing"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# FreeBSD 11
- name: export-freebsd-11
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "freebsd-11"
  - put: freebsd-11-gcs
    params:
      file: build-id-dir/freebsd-11*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: freebsd-11-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-freebsd-11
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/freebsd_11_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-freebsd-11"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-freebsd-11"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# FreeBSD 12
- name: export-freebsd-12
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "freebsd-12"
  - put: freebsd-12-gcs
    params:
      file: build-id-dir/freebsd-12*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: freebsd-12-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-freebsd-12
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/freebsd_12_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-freebsd-12"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-freebsd-12"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# FreeBSD 13
- name: export-freebsd-13
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "freebsd-13"
  - put: freebsd-13-gcs
    params:
      file: build-id-dir/freebsd-13*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: freebsd-13-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-freebsd-13
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/freebsd_13_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-freebsd-13"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-freebsd-13"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# openSUSE Leap 15
- name: export-opensuse-leap-15
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "opensuse-leap-15"
  - put: opensuse-leap-15-gcs
    params:
      file: build-id-dir/opensuse-leap-15*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: opensuse-leap-15-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-opensuse-leap-15
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/opensuse_leap_15_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-opensuse-leap-15"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-opensuse-leap-15"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# SLES 12
- name: export-sles-12
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "sles-12"
  - put: sles-12-gcs
    params:
      file: build-id-dir/sles-12*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: sles-12-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-sles-12
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/sles_12_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-sles-12"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-sles-12"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# SLES 15
- name: export-sles-15
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "sles-15"
  - put: sles-15-gcs
    params:
      file: build-id-dir/sles-15*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: sles-15-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-sles-15
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/sles_15_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-sles-15"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-sles-15"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu 18.04
- name: export-ubuntu-1804
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "ubuntu-1804"
  - put: ubuntu-1804-gcs
    params:
      file: build-id-dir/ubuntu-1804*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: ubuntu-1804-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-ubuntu-1804
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/ubuntu_1804_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-ubuntu-1804"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-ubuntu-1804"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu 20.04
- name: export-ubuntu-2004
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "ubuntu-2004"
  - put: ubuntu-2004-gcs
    params:
      file: build-id-dir/ubuntu-2004*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: ubuntu-2004-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-ubuntu-2004
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/ubuntu_2004_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-ubuntu-2004"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-ubuntu-2004"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu Pro 16.04
- name: export-ubuntu-pro-1604
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "ubuntu-pro-1604"
  - put: ubuntu-pro-1604-gcs
    params:
      file: build-id-dir/ubuntu-pro-1604*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: ubuntu-pro-1604-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-ubuntu-pro-1604
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/ubuntu_pro_1604_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-ubuntu-pro-1604"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-ubuntu-pro-1604"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu Pro 18.04
- name: export-ubuntu-pro-1804
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "ubuntu-pro-1804"
  - put: ubuntu-pro-1804-gcs
    params:
      file: build-id-dir/ubuntu-pro-1804*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: ubuntu-pro-1804-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-ubuntu-pro-1804
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/ubuntu_pro_1804_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-ubuntu-pro-1804"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-ubuntu-pro-1804"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu Pro 20.04
- name: export-ubuntu-pro-2004
  plan:
  - get: compute-image-tools
  - get: guest-test-infra
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - task: generate-build-id
    file: guest-test-infra/concourse/tasks/generate-build-id.yaml
    vars:
      prefix: "ubuntu-pro-2004"
  - put: ubuntu-pro-2004-gcs
    params:
      file: build-id-dir/ubuntu-pro-2004*
    get_params:
      skip_download: "true"
  - load_var: gcs-url
    file: ubuntu-pro-2004-gcs/url
  - task: generate-build-date
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: build-date
    file: publish-version/version
  - task: daisy-export-ubuntu-pro-2004
    file: guest-test-infra/concourse/tasks/daisy-export-images-partner.yaml
    vars:
      wf: "partner/ubuntu_pro_2004_export.wf.json"
      gcs_url: ((.:gcs-url))
      build_date: ((.:build-date))
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-ubuntu-pro-2004"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "export-ubuntu-pro-2004"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))


# Images for OS Loging staging tests.
# COS 85 LTS
- name: publish-oslogin-cos-85-lts
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: cos-85-lts-gcs
    passed: [export-cos-85-lts]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: cos-85-lts-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-oslogin-cos-85-lts
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/cos"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/cos_85_lts.publish.json"
      environment: "oslogin-staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-cos-85-lts"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-cos-85-lts"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# COS 89 LTS
- name: publish-oslogin-cos-89-lts
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: cos-89-lts-gcs
    passed: [export-cos-89-lts]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: cos-89-lts-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-oslogin-cos-89-lts
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/cos"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/cos_89_lts.publish.json"
      environment: "oslogin-staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-cos-89-lts"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-cos-89-lts"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# COS 93 LTS
- name: publish-oslogin-cos-93-lts
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: cos-93-lts-gcs
    passed: [export-cos-93-lts]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: cos-93-lts-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-oslogin-cos-93-lts
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/cos"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/cos_93_lts.publish.json"
      environment: "oslogin-staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-cos-93-lts"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-cos-93-lts"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# COS 97 LTS
- name: publish-oslogin-cos-97-lts
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: cos-97-lts-gcs
    passed: [export-cos-97-lts]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: cos-97-lts-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-oslogin-cos-97-lts
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/cos"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/cos_97_lts.publish.json"
      environment: "oslogin-staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-cos-97-lts"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-cos-97-lts"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# COS Dev
- name: publish-oslogin-cos-dev
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: cos-dev-gcs
    passed: [export-cos-dev]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: cos-dev-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-oslogin-cos-dev
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/cos"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/cos_dev.publish.json"
      environment: "oslogin-staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-cos-dev"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-cos-dev"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# openSUSE Leap 15
- name: publish-oslogin-opensuse-leap-15
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: opensuse-leap-15-gcs
    passed: [export-opensuse-leap-15]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: opensuse-leap-15-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-oslogin-opensuse-leap-15
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/suse"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/opensuse_leap_15.publish.json"
      environment: "oslogin-staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-opensuse-leap-15"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-opensuse-leap-15"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# SLES 12
- name: publish-oslogin-sles-12
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: sles-12-gcs
    passed: [export-sles-12]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: sles-12-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-oslogin-sles-12
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/suse"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/sles_12.publish.json"
      environment: "oslogin-staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-sles-12"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-sles-12"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# SLES 15
- name: publish-oslogin-sles-15
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: sles-15-gcs
    passed: [export-sles-15]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: sles-15-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-oslogin-sles-15
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/suse"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/sles_15.publish.json"
      environment: "oslogin-staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-sles-15"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-sles-15"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu 18.04
- name: publish-oslogin-ubuntu-1804
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: ubuntu-1804-gcs
    passed: [export-ubuntu-1804]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: ubuntu-1804-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-oslogin-ubuntu-1804
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/ubuntu"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/ubuntu_1804.publish.json"
      environment: "oslogin-staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-ubuntu-1804"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-ubuntu-1804"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu 20.04
- name: publish-oslogin-ubuntu-2004
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: ubuntu-2004-gcs
    passed: [export-ubuntu-2004]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: ubuntu-2004-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-oslogin-ubuntu-2004
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/ubuntu"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/ubuntu_2004.publish.json"
      environment: "oslogin-staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-ubuntu-2004"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-ubuntu-2004"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu Pro 16.04
- name: publish-oslogin-ubuntu-pro-1604
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: ubuntu-pro-1604-gcs
    passed: [export-ubuntu-pro-1604]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: ubuntu-pro-1604-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-oslogin-ubuntu-pro-1604
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/ubuntu"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/ubuntu_pro_1604.publish.json"
      environment: "oslogin-staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-ubuntu-pro-1604"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-ubuntu-pro-1604"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu Pro 18.04
- name: publish-oslogin-ubuntu-pro-1804
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: ubuntu-pro-1804-gcs
    passed: [export-ubuntu-pro-1804]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: ubuntu-pro-1804-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-oslogin-ubuntu-pro-1804
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/ubuntu"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/ubuntu_pro_1804.publish.json"
      environment: "oslogin-staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-ubuntu-pro-1804"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-ubuntu-pro-1804"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu Pro 20.04
- name: publish-oslogin-ubuntu-pro-2004
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: ubuntu-pro-2004-gcs
    passed: [export-ubuntu-pro-2004]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: ubuntu-pro-2004-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-oslogin-ubuntu-pro-2004
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/ubuntu"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/ubuntu_pro_2004.publish.json"
      environment: "oslogin-staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-ubuntu-pro-2004"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-oslogin-ubuntu-pro-2004"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))

# Publish partner images to staging project.
# COS 85 LTS
- name: publish-staging-cos-85-lts
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: cos-85-lts-gcs
    passed: [export-cos-85-lts]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: cos-85-lts-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-cos-85-lts
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/cos"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/cos_85_lts.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-cos-85-lts"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-cos-85-lts"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# COS 89 LTS
- name: publish-staging-cos-89-lts
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: cos-89-lts-gcs
    passed: [export-cos-89-lts]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: cos-89-lts-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-cos-89-lts
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/cos"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/cos_89_lts.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-cos-89-lts"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-cos-89-lts"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# COS 93 LTS
- name: publish-staging-cos-93-lts
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: cos-93-lts-gcs
    passed: [export-cos-93-lts]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: cos-93-lts-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-cos-93-lts
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/cos"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/cos_93_lts.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-cos-93-lts"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-cos-93-lts"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# COS 97 LTS
- name: publish-staging-cos-97-lts
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: cos-97-lts-gcs
    passed: [export-cos-97-lts]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: cos-97-lts-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-cos-97-lts
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/cos"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/cos_97_lts.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-cos-97-lts"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-cos-97-lts"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# COS Dev
- name: publish-staging-cos-dev
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: cos-dev-gcs
    passed: [export-cos-dev]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: cos-dev-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-cos-dev
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/cos"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/cos_dev.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-cos-dev"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-cos-dev"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Fedora 33
- name: publish-staging-fedora-33
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: fedora-33-gcs
    passed: [export-fedora-33]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: fedora-33-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-fedora-33
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/fedora"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/fedora_33.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-fedora-33"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-fedora-33"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Fedora 34
- name: publish-staging-fedora-34
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: fedora-34-gcs
    passed: [export-fedora-34]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: fedora-34-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-fedora-34
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/fedora"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/fedora_34.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-fedora-34"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-fedora-34"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Fedora CoreOS Next
- name: publish-staging-fedora-coreos-next
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: fedora-coreos-next-gcs
    passed: [export-fedora-coreos-next]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: fedora-coreos-next-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-fedora-coreos-next
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/fedora"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/fedora_coreos_next.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-fedora-coreos-next"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-fedora-coreos-next"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Fedora CoreOS Stable
- name: publish-staging-fedora-coreos-stable
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: fedora-coreos-stable-gcs
    passed: [export-fedora-coreos-stable]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: fedora-coreos-stable-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-fedora-coreos-stable
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/fedora"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/fedora_coreos_stable.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-fedora-coreos-stable"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-fedora-coreos-stable"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Fedora CoreOS Testing
- name: publish-staging-fedora-coreos-testing
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: fedora-coreos-testing-gcs
    passed: [export-fedora-coreos-testing]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: fedora-coreos-testing-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-fedora-coreos-testing
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/fedora"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/fedora_coreos_testing.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-fedora-coreos-testing"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-fedora-coreos-testing"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# FreeBSD 11
- name: publish-staging-freebsd-11
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: freebsd-11-gcs
    passed: [export-freebsd-11]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: freebsd-11-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-freebsd-11
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/freebsd"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/freebsd_11.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-freebsd-11"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-freebsd-11"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# FreeBSD 12
- name: publish-staging-freebsd-12
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: freebsd-12-gcs
    passed: [export-freebsd-12]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: freebsd-12-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-freebsd-12
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/freebsd"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/freebsd_12.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-freebsd-12"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-freebsd-12"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# FreeBSD 13
- name: publish-staging-freebsd-13
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: freebsd-13-gcs
    passed: [export-freebsd-13]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: freebsd-13-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-freebsd-13
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/freebsd"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/freebsd_13.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-freebsd-13"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-freebsd-13"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# openSUSE Leap 15
- name: publish-staging-opensuse-leap-15
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: opensuse-leap-15-gcs
    passed: [export-opensuse-leap-15]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: opensuse-leap-15-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-opensuse-leap-15
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/suse"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/opensuse_leap_15.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-opensuse-leap-15"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-opensuse-leap-15"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# SLES 12
- name: publish-staging-sles-12
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: sles-12-gcs
    passed: [export-sles-12]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: sles-12-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-sles-12
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/suse"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/sles_12.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-sles-12"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-sles-12"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# SLES 15
- name: publish-staging-sles-15
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: sles-15-gcs
    passed: [export-sles-15]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: sles-15-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-sles-15
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/suse"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/sles_15.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-sles-15"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-sles-15"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu 18.04
- name: publish-staging-ubuntu-1804
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: ubuntu-1804-gcs
    passed: [export-ubuntu-1804]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: ubuntu-1804-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-ubuntu-1804
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/ubuntu"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/ubuntu_1804.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-ubuntu-1804"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-ubuntu-1804"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu 20.04
- name: publish-staging-ubuntu-2004
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: ubuntu-2004-gcs
    passed: [export-ubuntu-2004]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: ubuntu-2004-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-ubuntu-2004
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/ubuntu"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/ubuntu_2004.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-ubuntu-2004"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-ubuntu-2004"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu Pro 16.04
- name: publish-staging-ubuntu-pro-1604
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: ubuntu-pro-1604-gcs
    passed: [export-ubuntu-pro-1604]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: ubuntu-pro-1604-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-ubuntu-pro-1604
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/ubuntu"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/ubuntu_pro_1604.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-ubuntu-pro-1604"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-ubuntu-pro-1604"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu Pro 18.04
- name: publish-staging-ubuntu-pro-1804
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: ubuntu-pro-1804-gcs
    passed: [export-ubuntu-pro-1804]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: ubuntu-pro-1804-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-ubuntu-pro-1804
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/ubuntu"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/ubuntu_pro_1804.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-ubuntu-pro-1804"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-ubuntu-pro-1804"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))
# Ubuntu Pro 20.04
- name: publish-staging-ubuntu-pro-2004
  plan:
  - get: guest-test-infra
  - get: compute-image-tools
  - task: generate-timestamp
    file: guest-test-infra/concourse/tasks/generate-timestamp.yaml
  - load_var: start-timestamp-ms
    file: timestamp/timestamp-ms
  - get: ubuntu-pro-2004-gcs
    passed: [export-ubuntu-pro-2004]
    trigger: true
    params:
      skip_download: "true"
  - load_var: source-version
    file: ubuntu-pro-2004-gcs/version
  - task: generate-version
    file: guest-test-infra/concourse/tasks/generate-version.yaml
  - load_var: publish-version
    file: publish-version/version # produced from generate-version task
  - task: publish-staging-ubuntu-pro-2004
    file: guest-test-infra/concourse/tasks/daisy-publish-images.yaml
    vars:
      source_gcs_path: "gs://gce-image-archive/partner/ubuntu"
      source_version: v((.:source-version))
      publish_version: ((.:publish-version))
      wf: "partner/ubuntu_pro_2004.publish.json"
      environment: "staging"
  on_success:
    task: success
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-ubuntu-pro-2004"
      result_state: "success"
      start_timestamp: ((.:start-timestamp-ms))
  on_failure:
    task: failure
    file: guest-test-infra/concourse/tasks/publish-job-result.yaml
    vars:
      pipeline: "partner-image-export"
      job: "publish-staging-ubuntu-pro-2004"
      result_state: "failure"
      start_timestamp: ((.:start-timestamp-ms))

# Groups
groups:
- name: cos
  jobs:
  - export-cos-85-lts
  - export-cos-89-lts
  - export-cos-93-lts
  - export-cos-97-lts
  - export-cos-dev
  - publish-oslogin-cos-85-lts
  - publish-oslogin-cos-89-lts
  - publish-oslogin-cos-93-lts
  - publish-oslogin-cos-97-lts
  - publish-oslogin-cos-dev
  - publish-staging-cos-85-lts
  - publish-staging-cos-89-lts
  - publish-staging-cos-93-lts
  - publish-staging-cos-97-lts
  - publish-staging-cos-dev
- name: fedora
  jobs:
  - export-fedora-33
  - export-fedora-34
  - export-fedora-coreos-next
  - export-fedora-coreos-stable
  - export-fedora-coreos-testing
  - publish-staging-fedora-33
  - publish-staging-fedora-34
  - publish-staging-fedora-coreos-next
  - publish-staging-fedora-coreos-stable
  - publish-staging-fedora-coreos-testing
- name: freebsd
  jobs:
  - export-freebsd-11
  - export-freebsd-12
  - export-freebsd-13
  - publish-staging-freebsd-11
  - publish-staging-freebsd-12
  - publish-staging-freebsd-13
- name: suse
  jobs:
  - export-opensuse-leap-15
  - export-sles-12
  - export-sles-15
  - publish-oslogin-opensuse-leap-15
  - publish-oslogin-sles-12
  - publish-oslogin-sles-15
  - publish-staging-opensuse-leap-15
  - publish-staging-sles-12
  - publish-staging-sles-15
- name: ubuntu
  jobs:
  - export-ubuntu-1804
  - export-ubuntu-2004
  - export-ubuntu-pro-1604
  - export-ubuntu-pro-1804
  - export-ubuntu-pro-2004
  - publish-oslogin-ubuntu-1804
  - publish-oslogin-ubuntu-2004
  - publish-oslogin-ubuntu-pro-1604
  - publish-oslogin-ubuntu-pro-1804
  - publish-oslogin-ubuntu-pro-2004
  - publish-staging-ubuntu-1804
  - publish-staging-ubuntu-2004
  - publish-staging-ubuntu-pro-1604
  - publish-staging-ubuntu-pro-1804
  - publish-staging-ubuntu-pro-2004
